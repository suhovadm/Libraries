# main.py - это исполняемый файл. Чтобы запустить конвертер, запускаем его.
# Также, не забываем установить pip install python-docx, чтобы всё заработало.

# ---> Импортируем библиотеки. <---

# Для создания графического интерфейса.
import tkinter as tk

# Для открытия диалоговых окон выбора файла и сохранения.
from tkinter import filedialog

# Подтягиваем функционал конвертирования из файла .docx в .md из файла converter.py
from converter import docx_to_md

# Заводим функцию для выбора файла через диалоговое окно. Без параметров.
def select_files():

    # Создаём основное окно приложения и тут же скрываем его методом withdraw(), поскольку нам не нужен
    # полноценный интерфейс, только диалоговые окна.
    root = tk.Tk()
    root.withdraw()

    # Открываем диалог выбора файла для открытия (выбор исходного .docx файла).
    input_path = filedialog.askopenfilename(
        title="Выберите Word файл",
        filetypes=[("Word документы", "*.docx")]
    )

    # Если пользователь отменил выбор, возвращаем None и говорим, что "Файл не выбран".
    if not input_path:
        print("Файл не выбран.")
        return

    # Открываем диалог выбора места и имени файла для сохранения.
    output_path = filedialog.asksaveasfilename(
        title="Сохранить Markdown как...",
        defaultextension=".md",
        filetypes=[("Markdown файлы", "*.md")]
    )

    # Если пользователь отменил сохранение, возвращаемся. Т.е. функция завершает работу.
    if not output_path:
        print("Путь для сохранения не выбран.")
        return

    # Запускаем преобразование с выбранными путями.
    # Функция docx_to_md берёт путь к исходному файлу и путь для сохранения результата.
    print("Запуск преобразования...")
    docx_to_md(input_path, output_path)

# Блок запуска программы, точка входа в программу.
# При запуске скрипта, вызывается функция select_files(), что запускает весь процесс.
if __name__ == "__main__":
    select_files()