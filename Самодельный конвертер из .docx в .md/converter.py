# Функционал конвертирования из .docx в .md.

# Импортируем необходимые библиотеки: Document из python-docx и tkinter для графического интерфейса.
from docx import Document

# Заводим функцию docx_to_md, которая принимает в себя 2 аргумента: input_path и output_path.
# input_path - путь к исходному файлу docx.
# output_path - путь, по которому будет сохранён файл md.
def docx_to_md(input_path, output_path):

    # Создаём объект Document, который загружает указанный вордовский файл для дальнейшего чтения.
    doc = Document(input_path)

    # Создаём пустой список для хранения строк Markdown.
    md_lines = []

    # Включаем цикл for, начинаем перебор каждого параграфа по очереди.
    # doc.paragraphs - список всех параграфов в документе.
    for paragraph in doc.paragraphs:

        # Обработка текста параграфа.
        # Получаем текст из параграфа и убираем лишние пробелы по краям за счёт strip()
        text = paragraph.text.strip()

        # Обработка пустых параграфов.
        # Если текст пустой (параграф пустой или содержит только пробелы), то в md_lines добавляется
        # пустая строка, далее переходим к следующему параграфу.
        if not text:
            md_lines.append("")
            continue

        # Определение стиля параграфа.
        # Получаем название стиля текущего параграфа.
        # В Word обычно есть стили вроде "Normal" (обычный текст),
        # "Heading 1", "Heading 2" и т.д.
        style = paragraph.style.name

        # Обработка заголовков.
        # Если стиль начинается с "Heading", то считается, что это заголовок.
        if style.startswith('Heading'):

            # style.replace('Heading ', '' - извлекаем число уровня заголовка (например, для "Heading 2" - 2).
            level = style.replace('Heading ', '')

            # В Markdown заголовки обозначаются символами #, число которых соответствует уровню.
            # Например: # Заголовок 1, ## - Заголовок 2 и т.д.
            # В строку добавляется строка вида: # * уровень + пробел + текст.
            md_lines.append('#' * int(level) + ' ' + text)

        # Обработка обычного текста.
        # Если стиль "Normal" (обычный текст), строка добавляется как есть.
        elif style == 'Normal':
            md_lines.append(text)

        # В остальных случаях (стили отличные от заголовков и Normal), текст тоже добавляется без изменений.
        else:
            md_lines.append(text)

    # Запись результата в файл.
    # Создаём или перезаписываем файл по указанному пути, задаём ему кодировку utf-8.
    with open(output_path, 'w', encoding='utf-8') as md_file:
        # В него записываются все строки из md_lines, соединённые символом новой строки ('\n').
        md_file.write('\n'.join(md_lines))

    # Вывод сообщения в консоль через f-строку.
    print(f"Markdown файл сохранен по пути: {output_path}")