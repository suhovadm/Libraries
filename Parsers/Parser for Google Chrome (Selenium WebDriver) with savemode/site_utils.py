# Импортируем функцию urlparse из библиотеки urllib.parse, которая разбирает URL
# и возвращает объект с его компонентами, такими как схема, домен, путь и т.д.
from urllib.parse import urlparse

# Логика извлечения базового имени сайта из URL для использовании имени сайта.
# Это нужно, для получения "чистого" имени сайта, чтобы назвать файл, в который
# потом сохраняется содержимое страницы.
# Заводим функцию get_site_name, передаём в неё 1 аргумент - url.
def get_site_name(url):

    # Разбираем определённый url на компоненты (например, схему, посты, путь)
    # и сохраняем результат в переменную parsed_url.
    parsed_url = urlparse(url)

    # Извлекаем из разобранного URL имя хоста (доменное имя).
    hostname = parsed_url.hostname

    # Проверяем, что имя хоста получено успешно, то есть не равно None.
    if hostname:

        # Преобразуем имя хоста в нижний регистр и удаляем префикс www.
        # чтобы получить чистое доменное имя.
        hostname = hostname.lower().replace('www.', '')

        # Разбиваем доменное имя по точкам и берём первую часть, то есть
        # основное имя, без .ru, без .com и прочего.
        name = hostname.split('.')[0]

        # Возвращаем полученное имя сайта.
        return name

    # Если имя хоста извлечь не удалось (например, URL был некорректен), возвращаем дефолтное название 'site'.
    else:
        return 'site'