# Задача: напишите парсер, который будет открывать сайт в браузере без его отображения
# на экране, загружать содержимое страницы и выводить его в консоль Пайтона.

# from selenium import webdriver - позволяет управлять браузером, запускать его, открывать
# страницы, взаимодействовать с элементами страницы и получать информацию о ней.
from selenium import webdriver

# from selenium.webdriver.chrome.options import Options -
# нужна для запуска браузера в фоновом режиме (headless),
# отключения GPU, добавления пользовательских аргументов cmd и др. настроек.
from selenium.webdriver.chrome.options import Options

# Стандартная библиотека Python, предосталвяет функции для работы со временем.
# Используется для задержек выполнения с помощью функции time.sleep, чтобы дать
# странице время полностью загрузиться перед получением её исходного кода.
import time

# <--- Настраиваем headless-режим, т.е. без открытия окна браузера. --->
# То есть, говорим браузеру работать "скрытно" и не показывать окно.
chrome_options = Options()
chrome_options.add_argument("--headless")  # Запускаем браузер без GUI. Браузер работает в фоне для экономии ресурсов.
chrome_options.add_argument("--disable-gpu") # Отключаем использование GPU. В некоторых случаях, режим GPU-ускорения может вызывать ошибки при парсинге, поэтому отключён.
chrome_options.add_argument("--no-sandbox") # Отключаем песочницу. При запуске внутри Docker, или на серверах без полного уровня привелегий sandbox может мешать запуску браузера. В таких случаях его отключают, чтобы Chrome вообще стартовал.
chrome_options.add_argument("--disable-blink-features=AutomationControlled") # Маскируем автоматизацию, чтобы сайт не понял, что его парсят. Это нужно, чтобы избежать блокировок или капч, которые могут обнаружить автоматизацию.
# Также, можно добавить другие опции для маскировки автоматизации...

# Инициализация драйвера.
# Создаём переменную и запускаем Chrome с выбранными настройками.
driver = webdriver.Chrome(options=chrome_options)

# Заводим функцию для загрузки страницы, передаём в неё 1 аргумент - url.
def parse_page(url):
    try:

        # Загружаем сайт по ссылке.
        driver.get(url)

        # Ждём 3 секунды, чтобы страница точно загрузилась.
        # Здесь, либо добавляем задержку, чтобы дождаться загрузки контента,
        # либо используем WebDriverWait для более точного контроля.
        time.sleep(3)

        # Получаем весь HTML-код страницы, т.е. исходный код.
        page_source = driver.page_source
        return page_source

    # Перехват ошибок.
    except Exception as e:

        # Если что-то пошло не так - выводим ошибку.
        print(f"Ошибка при парсинге: {e}")
        return None

if __name__ == "__main__":

    # Здесь указываем сайт, который нам нужно спарсить.
    target_url = "https://psma.ru/"

    # Загружаем страницу.
    content = parse_page(target_url)

    if content:

        # Выводим весь HTML-код страницы.
        print(content)

    # Закрываем браузер и высвобождаем ресурсы.
    driver.quit()