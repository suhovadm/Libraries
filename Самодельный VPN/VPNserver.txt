import socket
import threading
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
import json

HOST = '0.0.0.0'
PORT = 1194

clients = []

# Простая база данных пользователей
users = {
    'n1rvana': '123456789',
    'user2': 'password2'
}

SHARED_SECRET_KEY = b'Sixteen byte key'  # 16 байт для AES-128

def encapsulate_ip_packet(ip_packet_bytes):
    header = b'VPNIP'
    return header + ip_packet_bytes

def decapsulate_ip_packet(data):
    if data.startswith(b'VPNIP'):
        return data[5:]
    else:
        return None

def encrypt(data, key):
    cipher = AES.new(key, AES.MODE_CBC)
    ct_bytes = cipher.encrypt(pad(data, AES.block_size))
    return cipher.iv + ct_bytes

def decrypt(encrypted_data, key):
    iv = encrypted_data[:16]
    ct = encrypted_data[16:]
    cipher = AES.new(key, AES.MODE_CBC, iv)
    pt = unpad(cipher.decrypt(ct), AES.block_size)
    return pt

def authenticate_client(sock):
    try:
        # Получаем сообщение с логином и паролем в JSON
        data = sock.recv(4096)
        if not data:
            return None
        decrypted = decrypt(data, SHARED_SECRET_KEY)
        auth_info = json.loads(decrypted.decode())
        username = auth_info.get('login')
        password = auth_info.get('password')

        if users.get(username) == password:
            response = {'status': 'ok', 'message': 'Аутентификация прошла успешно.'}
            sock.sendall(encrypt(json.dumps(response).encode(), SHARED_SECRET_KEY))
            return username
        else:
            response = {'status': 'fail', 'message': 'Неверный логин или пароль.'}
            sock.sendall(encrypt(json.dumps(response).encode(), SHARED_SECRET_KEY))
            sock.close()
            return None
    except Exception as e:
        print(f"Ошибка аутентификации: {e}")
        sock.close()
        return None

def handle_client(client_socket, addr):
    print(f"Подключен клиент {addr}")
    username = None
    try:
        # Аутентификация
        username = authenticate_client(client_socket)
        if not username:
            return
        # Добавляем клиента в список
        clients.append((client_socket, addr, username))
        while True:
            data = client_socket.recv(4096)
            if not data:
                break
            try:
                decrypted_data = decrypt(data, SHARED_SECRET_KEY)
            except Exception:
                print("Ошибка расшифровки данных")
                continue

            ip_packet = decapsulate_ip_packet(decrypted_data)
            if ip_packet is None:
                continue

            # Рассылаем IP-пакет всем клиентам, кроме отправителя
            for c, c_addr, c_user in clients:
                if c != client_socket:
                    encapsulated = encapsulate_ip_packet(ip_packet)
                    encrypted_response = encrypt(encapsulated, SHARED_SECRET_KEY)
                    c.sendall(encrypted_response)
    except Exception as e:
        print(f"Ошибка: {e}")
    finally:
        print(f"Отключение клиента {addr}")
        if (client_socket, addr, username) in clients:
            clients.remove((client_socket, addr, username))
        client_socket.close()

def main():
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind((HOST, PORT))
    server.listen(5)
    print(f"VPN-сервер запущен на {HOST}:{PORT}")

    while True:
        client_sock, addr = server.accept()
        threading.Thread(target=handle_client, args=(client_sock, addr), daemon=True).start()

if __name__ == "__main__":
    main()
