1. SOCKS5_Client_Main.py
Главный координационный центр клиентской части SOCKS5 прокси.
Файл служит "мозгом" клиентского приложения.
Основное назначение - объединить все модули клиента в единую систему.
После запуска:
- на локальной машине появляется SOCKS5 прокси на порту 1081,
- приложения могут использовать localhost:1081 как прокси,
- весь трафик автоматически шифруется и перенаправляется на удалённый сервер.
Преимущества:
- простота использования - один класс для всего функционала,
- модульность - лекго менять отдельные компоненты,
- безопасность - централизованная инициализация ключей,
- логирование - единая система для отслеживания работы.

2. SOCKS5_Client_Proxy.py
Модуль локального прокси-сервера клиентской части. Файл создаёт локальный SOCKS5 прокси на компьютере пользователя,
который перенаправляет трафик на удалённый зашифрованный прокси.
Простыми словами, этот файл создаёт "посредника" на нашем компьютере, который делает вид, что это обычный SOCKS5 прокси,
но на самом деле он шифрует весь трафик и отправляет его на удалённый сервер. Это "маскировочный слой" между нашим
приложениями и зашифрованным туннелем.
+ С этим файлом приложения вообще не знают о шифровании.

3. SOCKS5_Client_Handler.py
Модуль обработки локальных клиентских подключений.
Он отвечает за установление соединения между локальными приложениями и удалённым зашифрованным прокси-сервером.
По сути, это посредник между локальными приложениями и удалённым прокси, который управляет SOCKS5 handshake
и инициализирует зашифрованное соединение.
Если ещё проще, то это "переводчик" между обычными приложениями (которые говорят на языке SOCKS5) и нашим
зашифрованным прокси (который понимает только зашифрованные сообщения).
3.1 Принимает SOCKS5 запрос от локального приложения,
3.2 Подключается к удалённому прокси-серверу,
3.3 Выполняет аутентификацию с прокси,
3.4 Шифрует и пересылает оригинальный SOCKS5 запрос,
3.5 Дешифрует и передаёт ответ обратно клиенту,
3.6 Запускает туннель для передачи данных.

4. SOCKS5_Client_Encrypt.py
Криптографический модуль клиентской части SOCKS5 прокси.
Файл отвечает за всю безопасность передачи данных между клиентом и сервером.
Проще говоря, данный файл превращает обычный SOCKS5 прокси в безопасный зашифрованный
туннель, где весь трафик защищён от перехвата и модификации.

Алгоритмы безопасности:
- шифрование: AES-256-CBC с PKC7 padding
- аутентификация: HMAC-SHA256

Компоненты шифрования:
- IV (Initialization Vector) - случайные 16 байт для каждого шифрования
- AES-256-CBC - симметричное шифрование с цепочкой блоков
- HMAC-SHA256 - защита от модификации данных в пути.

Защитные механизмы:
4.1. Конфиденциальность.
- Данные шифруются AES-256 перед отправкой
- Перехватчик видит только зашифрованный трафик

4.2. Целостность
- HMAC защищает от модификации данных в пути
- Любое изменение данных приведёт к ошибке проверки HMAC

4.3. Аутентичность
- Только сторона с правильным ключом может создать валидный HMAC
- Защита от подмены отправителя

5. SOCKS5_Client_Tunnel.py
Модуль двунаправленного туннелирования данных клиентской части.
Файл создаёт и управляет зашифрованным каналом передачи данных между локальным клиентом и удалённым прокси-сервером.
Если простыми словами, то этот файл создаёт "двустороннюю трубу" между вашим компьютером и удалённым сервером, где
данные могут течь одновременно в обоих направлениях, автоматически шифруясь и дешифруясь.

5.1 Полнодуплексная связь
- данные могут передаваться одновременно в обе стороны
- нет блокировок при ожидании ответа

5.2 Эффективность передачи
- буферизация - чтение данных блоками по 8192 байт
- префикс длины - точное чтение зашифрованных блоков
- параллелизм - два независимых потока

5.3 Надёжность
- корректное закрытие соединений
- обработка ошибок - логирование без падения всего туннеля
- таймауты - защита от зависших соединений
