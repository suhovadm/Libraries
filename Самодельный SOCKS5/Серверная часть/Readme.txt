1. SOCKS5_server_config.py (основа всего)
Главный конфигурационный файл SOCKS5 сервера, который содержит все настройки и параметры работы прокси-сервера.
Единое место для управления всеми настройками сервера - вместо того чтобы "размазывать" конфигурацию по разным файлам,
все параметры собраны в одном классе.

Что конкретно он настраивает?
- сетевые параметры,
- безопасность,
- производительность,
- шифрование.

Если по-простому - это "пульт управления" всего SOCKS5 сервера, где можно одним нажатием поменять любые настройки
от порта до параметров безопасности.

2. SOCKS5_server_logging.py (диагностика)
В данном файле мы настраиваем КАК будет работать логирование.
Логирование распределено по всему коду, а не только в этом файле.

3. SOCKS5_server_crypto_utils.py (безопасность)
Криптографический модуль SOCKS5 сервера.
Данный файл реализует полный криптографический стек для безопасной работы SOCKS5 прокси-сервера.
Он обеспечивает:
- шифрование трафика между клиентом и сервером,
- аутентификацию сообщений для защиты от подмены данных,
- проверку подлинности клиентов через токены,
- целостность данных для предотвращения модификации в пути.

4. SOCKS5_server_protocol_and_tunneling.py (логика)

AddressValidator - валидатор адресов:
- проверяет целевые адреса на безопасность,
- блокирует подключения к запрещённым сетям (localhost, приватные сети)
- контролирует корректность портов.

ProtocolHandler - обработчик SOCKS5 протокола:
- обрабатывает SOCKS5 handshake и запросы на подключение,
- парсит адреса назначения (IPv4 и доменные имена),
- устанавливает соединения с целевыми сорверами.

TunnelManager - менеджер туннелей:
- создаёт двунаправленные туннели между клиентом и целевым сервером,
- шифрует/дешифрует передаваемые данные,
- управляет потоками передачи данных,
- контролирует размеры передаваемых данных.

Ключевые функции:
- безопасная аутентификация клиентов,
- парсинг SOCKS5 протокола (IPv4, доменные имена),
- фильтрация опасных адресов,
- двустороннее шифрование трафика,
- многопоточная обработка данных.

Данный файл превращает обычное TCP-подключение в безопасный SOCKS5 прокси-туннель с шифрованием и проверкой на безопасность.

5. SOCKS5_server_client_handler.py (управление клиентами)
Модуль обработки клиентских подключений.
Данный скрипт отвечает за управление пулом клиентских подключений - 
контроль максимального количества одновременных клиентов.
Обработку жизненного цикла клиента - от подключения до отключения.
Синхронизацию потоков - безопасную работу в многопоточной среде.
Координацию работы модулей - связывает ProtocolHandler и TunnelManager.

6. SOCKS5_server_core.py (мозг всего сервера, координация)
Главный координационный центр всего SOCKS5 прокси-сервера, который объединяет все компоненты системы и управляет их работой.
По-сути, это "мозг" всего сервера, который:

- собирает все модули в единую систему,
- управляет жизненным циклом сервера,
- координирует работу всех компонентов,
- обеспечивает запуск и корректное завершение.

Данный файл отвечает за:
- единую точку входа для всего сервера,
- координацию работы всех модулей,
- управление жизненным циклом сервера,
- систему "один клиент - один поток".

7. SOCKS5_server_main.py (запуск)
Главный исполняемый файл, точка входа в программу.
Он подтягивает ядро программы и весь её основной
функционал к исполнению и запускает сервер.

===================================================================

1. Config → первый
Все модули зависят от конфигурации
Без конфига не работают криптография, логирование и т.д.

2. Logging → второй
Нужен для диагностики работы всех последующих модулей
CryptoUtils и ProtocolHandler используют логирование

3. CryptoUtils → третий
ProtocolHandler зависит от шифрования
Безопасность должна инициализироваться до логики протокола

4. Protocol → четвертый
ClientHandler зависит от ProtocolHandler
Содержит основную бизнес-логику

5. ClientHandler → пятый
Core зависит от ClientHandler
Управление клиентами - надстройка над протоколом

6. Core → шестой
Собирает ВСЕ предыдущие модули
Координирует всю систему

7. Main → седьмой
Точка входа запускает Core
Должен быть последним
