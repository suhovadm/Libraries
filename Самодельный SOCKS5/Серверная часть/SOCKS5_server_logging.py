# 2. Модуль настроек логирования.

import logging # Библиотека для работы с логами.

# Заводим класс LoggingSetup.
class LoggingSetup:

    # @staticmethod - декоратор, который преобразует метод в статический.
    # Статический метод не требует создания экземпляра класса и не принимает self.
    # Можно вызывать напрямую: LoggingSetup.setup_logging()
    # Это правильно, так как настройка логирования обычно нужна один раз при запуске.
    @staticmethod
    def setup_logging():

        # Базовая настройка системы логирования.
        # logging.basicConfig - функция из стандартной библиотеки logging.
        # Настраивает корневой логгер (root logger).
        # Вызывается один раз при старте программы.
        # Устанавливает глобальные параметры логирования.
        logging.basicConfig(

            # Параметр level=logging.INFO
            # logging.DEBUG = 10 - отладочная информация
            # logging.INFO = 20 - информационные сообщения [V]
            # logging.WARNING = 30 - предупреждения
            # logging.ERROR = 40 - ошибки
            # logging.CRITICAL = 50 - критические ошибки

            # В нашем случае, будут записываться сообщения уровня INFO и выше.
            # Не будут записываться DEBUG сообщения.
            # Будут записаны: INFO, WARNING, ERROR и CRITICAL.
            level=logging.INFO,

            # %(asctime)s - временная метка(по умолчанию: 2023-10-12 21:40:32,353)
            # %(levelname)s - уровень логирования (INFO, WARNING, ERROR и CRITICAL)
            # %(message)s - текст сообщения

            # Пример вывода:
            # 2023-10-12 21:40:32,353 - INFO - Сервер запущен на 0.0.0.0:1080
            # 2023-10-12 21:40:45,127 - WARNING - Достигнут максимум подключений
            # 2023-10-12 21:41:02,891 - ERROR - Ошибка дешифрования данных

            format='%(asctime)s - %(levelname)s - %(message)s',

            # Вывод лога сразу в консоль и запись в файл:
            handlers=[
                logging.FileHandler('server.log'), # В файл
                logging.StreamHandler()            # и в консоль
            ]
        )

        # Создание логгера для класса.
        # logging.getLogger(__name__) - создаёт или возвращает существующий логгер.
        # __name__ - специальная переменная Python с именем текущего модуля.

        # Если файл запущен напрямую:
        # __name__ содержит имя текущего модуля. Если модуль запущен напрямую: __name__ = "__main__"
        # Если модуль импортирован: __name__ = "имя файла" (без расширения .py)

        return logging.getLogger(__name__)